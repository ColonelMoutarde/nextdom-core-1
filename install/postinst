#!/bin/bash

usage() { echo "Usage: $0 [-h <help>] [-i <DB ip/hostname>] [-p <DB port>] [-d <DB name>] [-u <DB username>] [-z <DB user password>] " 1>&2; exit 1; }

while getopts ":i:p:d:u:z:" option; do
    case "${option}" in
        h)
            usage
            ;;
        i)
            MYSQL_HOSTNAME=${OPTARG}
            ;;
        p)
            MYSQL_PORT=${OPTARG}
            ;;
        d)
            MYSQL_NEXTDOM_DB=${OPTARG}
            ;;
        u)
            MYSQL_NEXTDOM_USER=${OPTARG}
            ;;
        z)
            MYSQL_NEXTDOM_PASSWD=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [[ ! -z "${MYSQL_HOSTNAME}" ]] || [[ ! -z "${MYSQL_PORT}" ]] ; then
    echo ">>>>> Custom database must be previously created <<<<<"
  # todo : test la bdd distante
  # some_db="somedb"
  # isAnythingToProcess=$(mysql -uroot -proot -h REMOTE_IP -D$some_db -e "$checkSearch");
fi

if [[ -z "${MYSQL_HOSTNAME}" ]] ;       then MYSQL_HOSTNAME="localhost" ; fi
if [[ -z "${MYSQL_PORT}" ]] ;           then MYSQL_PORT="3306" ; fi
#if [[ -z "${MYSQL_NEXTDOM_DB}" ]] ;     then MYSQL_NEXTDOM_DB="nextdom" ; fi
#if [[ -z "${MYSQL_NEXTDOM_USER}" ]] ;   then MYSQL_NEXTDOM_USER="nextdom" ; fi
if [[ -z "${MYSQL_NEXTDOM_PASSWD}" ]] ; then MYSQL_NEXTDOM_PASSWD=$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 15) ; fi


# Parameters
STEP=0
WEBSERVER_HOME=/usr/share/nextdom
HTML_OUTPUT=0
#MYSQL_NEXTDOM_PASSWD=$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 15)

# Get current directory
set_root() {
    local this=`readlink -n -f $1`
    local bin=`dirname $this`
    root=`dirname $bin`
}
set_root $0

# Detect if there is a .git directory (development version)
if [ -d ${root}/.git ] ; then
    echo "Development version..."
    isdev=1
    if [[ -z "${MYSQL_NEXTDOM_DB}" ]] ; then MYSQL_NEXTDOM_DB="nextdomdev" ; fi
    if [[ -z "${MYSQL_NEXTDOM_USER}" ]] ; then MYSQL_NEXTDOM_USER="nextdomdev" ; fi
    WEBSERVER_HOME=${root}
    echo " "
    echo "Installation dir  : ${WEBSERVER_HOME}"
    echo "Database host     : ${MYSQL_HOSTNAME}"
    echo "Database port     : ${MYSQL_PORT}"
    echo "Database name     : ${MYSQL_NEXTDOM_DB}"
    echo "Database user     : ${MYSQL_NEXTDOM_USER}"
    echo "Database password : ${MYSQL_NEXTDOM_PASSWD}"
else
    # Debian package configuration...
    isdev=0
    if [[ -z "${MYSQL_NEXTDOM_DB}" ]] ; then MYSQL_NEXTDOM_DB="nextdom" ; fi
    if [[ -z "${MYSQL_NEXTDOM_USER}" ]] ; then MYSQL_NEXTDOM_USER="nextdom" ; fi
fi

#exit 0

set -e


DEBUG="/tmp/output.txt"
VERT="\\033[1;32m"
NORMAL="\\033[0;39m"
ROUGE="\\033[1;31m"
ROSE="\\033[1;35m"
BLEU="\\033[1;34m"
BLANC="\\033[0;02m"
BLANCLAIR="\\033[1;08m"
JAUNE="\\033[1;33m"
CYAN="\\033[1;36m"

delay(){
    sleep 1
}

if [ $(id -u) != 0 ] ; then
    echo "Les droits de super-utilisateur (root) sont requis pour installer NextDom"
    echo "Veuillez lancer 'sudo $0' ou connectez-vous en tant que root, puis relancez $0"
    exit 1
fi

step_7_nextdom_customization() {

    # Certificat auto signe
    if [[ ! -f /etc/nextdom/ssl/nextdom.crt ]] || [[ ! -f /etc/nextdom/ssl/nextdom.csr ]] || [[ ! -f /etc/nextdom/ssl/nextdom.key ]] ; then
        cd /etc/nextdom/ssl/ >> ${DEBUG} 2>&1
        openssl genrsa -out nextdom.key 2048 >> ${DEBUG} 2>&1
        #openssl req -new -key nextdom.key -out nextdom.csr
        openssl req -new -key nextdom.key -out nextdom.csr -subj "/C=FR/ST=Paris/L=Paris/O=Global Security/OU=IT Department/CN=example.com" >> ${DEBUG} 2>&1
        openssl x509 -req -days 3650 -in nextdom.csr -signkey nextdom.key -out nextdom.crt >> ${DEBUG} 2>&1
    fi

    # Apache2
    a2enmod ssl >> ${DEBUG} 2>&1
    a2dissite 000-default >> ${DEBUG} 2>&1
    a2dissite default-ssl >> ${DEBUG} 2>&1
    a2ensite nextdom-ssl >> ${DEBUG} 2>&1
    a2ensite nextdom >> ${DEBUG} 2>&1
    a2enconf nextdom-security >> ${DEBUG} 2>&1

    for file in $(find /etc/ -iname php.ini -type f); do
        echo "Update php file ${file}" >> ${DEBUG} 2>&1
        sed -i 's/max_execution_time = 30/max_execution_time = 600/g' ${file} > /dev/null 2>&1
        sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 1G/g' ${file} > /dev/null 2>&1
        sed -i 's/post_max_size = 8M/post_max_size = 1G/g' ${file} > /dev/null 2>&1
        sed -i 's/expose_php = On/expose_php = Off/g' ${file} > /dev/null 2>&1
        sed -i 's/;opcache.enable=0/opcache.enable=1/g' ${file} > /dev/null 2>&1
        sed -i 's/opcache.enable=0/opcache.enable=1/g' ${file} > /dev/null 2>&1
        sed -i 's/;opcache.enable_cli=0/opcache.enable_cli=1/g' ${file} > /dev/null 2>&1
        sed -i 's/opcache.enable_cli=0/opcache.enable_cli=1/g' ${file} > /dev/null 2>&1
    done

    a2dismod status >> ${DEBUG} 2>&1
    a2enmod rewrite >> ${DEBUG} 2>&1
    systemctl daemon-reload >> ${DEBUG} 2>&1
    service apache2 restart >> ${DEBUG} 2>&1
    if [ $? -ne 0 ]; then
        service apache2 restart >> ${DEBUG} 2>&1
        if [ $? -ne 0 ]; then
            printf "${ROUGE}Ne peut redémarrer apache - Annulation${NORMAL}"
            exit 1
        fi
    fi

    # MySQL
    set +e
    #isMySQL=$(ls /etc/init.d | grep mysql)
    mysqladmin -u root status >/dev/null 2>/dev/null
    isMySQL=$?
    set -e
    if [[ ${isMySQL} = "0" ]] ; then
        service mysql stop >> ${DEBUG} 2>&1
        if [ $? -ne 0 ]; then
            service mysql stop >> ${DEBUG} 2>&1
            if [ $? -ne 0 ]; then
                printf "${ROUGE}Ne peut arrêter mysql - Annulation${NORMAL}"
                exit 1
            fi
        fi

        rm -f /var/lib/mysql/ib_logfile*

        if [ -d /etc/mysql/conf.d ]; then
            touch /etc/mysql/conf.d/nextdom_my.cnf
            echo "[mysqld]" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "skip-name-resolve" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "key_buffer_size = 16M" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "thread_cache_size = 16" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "tmp_table_size = 48M" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "max_heap_table_size = 48M" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "query_cache_type =1" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "query_cache_size = 32M" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "query_cache_limit = 2M" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "query_cache_min_res_unit=3K" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "innodb_flush_method = O_DIRECT" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "innodb_flush_log_at_trx_commit = 2" >> /etc/mysql/conf.d/nextdom_my.cnf
            echo "innodb_log_file_size = 32M" >> /etc/mysql/conf.d/nextdom_my.cnf
        fi

        service mysql start >> ${DEBUG} 2>&1
        if [ $? -ne 0 ]; then
            service mysql start >> ${DEBUG} 2>&1
            if [ $? -ne 0 ]; then
                printf "${ROUGE}Ne peut lancer mysql - Annulation${NORMAL}"
                exit 1
            fi
        fi

    fi
}

step_8_nextdom_configuration() {

    cp ${WEBSERVER_HOME}/core/config/common.config.sample.php ${WEBSERVER_HOME}/core/config/common.config.php

    if [[ ${isMySQL} = "0" ]] ; then
        TEST_USER="$(mysql -u root -sse "SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = '${MYSQL_NEXTDOM_USER}');")" >> ${DEBUG} 2>&1
        if [ $TEST_USER = "1" ]; then
            mysql -u root -e "DROP USER '${MYSQL_NEXTDOM_USER}'@'localhost';" 
        fi
        mysql -u root -e "CREATE USER '${MYSQL_NEXTDOM_USER}'@'localhost' IDENTIFIED BY '${MYSQL_NEXTDOM_PASSWD}';"
        mysql -u root -e "DROP DATABASE IF EXISTS ${MYSQL_NEXTDOM_DB};"
        mysql -u root -e "CREATE DATABASE ${MYSQL_NEXTDOM_DB};"
        mysql -u root -e "GRANT ALL PRIVILEGES ON ${MYSQL_NEXTDOM_DB}.* TO '${MYSQL_NEXTDOM_USER}'@'localhost';"
        sed -i "s/#PASSWORD#/${MYSQL_NEXTDOM_PASSWD}/g" ${WEBSERVER_HOME}/core/config/common.config.php
        sed -i "s/#DBNAME#/${MYSQL_NEXTDOM_DB}/g" ${WEBSERVER_HOME}/core/config/common.config.php
        sed -i "s/#USERNAME#/${MYSQL_NEXTDOM_USER}/g" ${WEBSERVER_HOME}/core/config/common.config.php
        sed -i "s/#PORT#/${MYSQL_PORT}/g" ${WEBSERVER_HOME}/core/config/common.config.php
        sed -i "s/#HOST#/${MYSQL_HOSTNAME}/g" ${WEBSERVER_HOME}/core/config/common.config.php
    else
        echo " "
        echo ">>>>> Database not present! Please set manually DB parameters : <<<<<"
        echo ">>>>>         host, port, dbname, username and password         <<<<<"
        echo " in file : ${WEBSERVER_HOME}/core/config/common.config.php"
        echo " "
    fi

    chmod 775 -R ${WEBSERVER_HOME}
    chown -R www-data:www-data ${WEBSERVER_HOME}
}

step_9_nextdom_installation() {
    mkdir -p /tmp/nextdom >> ${DEBUG} 2>&1
    chmod 777 -R /tmp/nextdom >> ${DEBUG} 2>&1
    chown www-data:www-data -R /tmp/nextdom >> ${DEBUG} 2>&1
    cd ${WEBSERVER_HOME}
    php ${WEBSERVER_HOME}/install/install.php mode=force >> ${DEBUG} 2>&1
    if [ $? -ne 0 ]; then
        echo "${ROUGE}Ne peut installer nextdom - Annulation${NORMAL}"
        exit 1
    fi
    cd ${WEBSERVER_HOME}
}

step_10_nextdom_post() {
    rm -f /etc/cron.d/nextd* >> ${DEBUG} 2>&1
    if [ $(crontab -l 2>/dev/null | grep nextdom | wc -l) -ne 0 ];then
        (echo crontab -l | grep -v "nextdom") | crontab -  >> ${DEBUG} 2>&1
    fi
    if [ ! -f /etc/cron.d/nextdom ]; then
        echo "* * * * * www-data /usr/bin/php ${WEBSERVER_HOME}/core/php/jeeCron.php >> /dev/null" > /etc/cron.d/nextdom
        if [ $? -ne 0 ]; then
            printf "${ROUGE}Ne peut installer le cron de nextdom - Annulation${NORMAL}"
            exit 1
        fi
    fi
    if [ ! -f /etc/cron.d/nextdom_watchdog ]; then
        echo "*/5 * * * * root /usr/bin/php ${WEBSERVER_HOME}/core/php/watchdog.php >> /dev/null" > /etc/cron.d/nextdom_watchdog
        if [ $? -ne 0 ]; then
            printf "${ROUGE}Ne peut installer le cron de nextdom - Annulation${NORMAL}"
            exit 1
        fi
    fi
    usermod -a -G dialout,tty www-data
    #
    if [ $(grep "www-data ALL=(ALL) NOPASSWD: ALL" /etc/sudoers | wc -l) -eq 0 ];then
        echo "www-data ALL=(ALL) NOPASSWD: ALL" | (EDITOR="tee -a" visudo)
        if [ $? -ne 0 ]; then
            printf "${ROUGE}Ne peut permettre à nextdom d'utiliser sudo - Annulation${NORMAL}"
            exit 1
        fi
    fi
    if [ $(cat /proc/meminfo | grep MemTotal | awk '{ print $2 }') -gt 600000 ]; then
        if [ $(cat /etc/fstab | grep /tmp/nextdom | grep tmpfs | wc -l) -eq 0 ];then
            echo 'tmpfs        /tmp/nextdom            tmpfs  defaults,size=128M                                       0 0' >>  /etc/fstab
        fi
    fi
    service cron start
}

step_11_nextdom_check() {
    php ${WEBSERVER_HOME}/sick.php >> ${DEBUG} 2>&1
    chmod 777 -R /tmp/nextdom >> ${DEBUG} 2>&1
    chown www-data:www-data -R /tmp/nextdom >> ${DEBUG} 2>&1
}

distrib_1_spe(){
    cd /tmp
    if [ -f post-install.sh ]; then
        rm post-install.sh >> ${DEBUG} 2>&1
    fi
    if [ -f /etc/armbian.txt ]; then
        cp ${WEBSERVER_HOME}/install/OS_specific/armbian/post-install.sh post-install.sh >> ${DEBUG} 2>&1
    fi
    if [ -f /usr/bin/raspi-config ]; then
        cp ${WEBSERVER_HOME}/install/OS_specific/rpi/post-install.sh post-install.sh >> ${DEBUG} 2>&1
    fi
    if [ -f post-install.sh ]; then
        chmod +x post-install.sh >> ${DEBUG} 2>&1
        ./post-install.sh >> ${DEBUG} 2>&1
        rm post-install.sh >> ${DEBUG} 2>&1
    fi
}

check_var_www_html() {
    dirn="/var/www/html"
    # Verification que le repertoire /var/www/html est bien vide
    if [[ -d ${dirn} ]] ; then
      count="$( find ${dirn} -mindepth 1 -maxdepth 1 | wc -l )"
      if [ $count -gt 0 ] ; then
        tmpd="$(mktemp -d -u /var/www/html.XXXXXXXX)"
        mv ${dirn} ${tmpd}
        echo " "
        echo ">>>>> Nextdom Warning : directory ${dirn} isn't empty.. Renaming it ${tmpd} ... <<<<<"
        echo " "
      fi
    fi
    if [[ -L ${dirn} ]] ; then
        tfile=$(mktemp -u /var/www/html.XXXXXXXX)
        cd /var/www/
        mv ${dirn} ${tfile}
        echo " "
        echo ">>>>> Nextdom Warning : directory ${dirn} is a link. Renaming it ${tfile} ... <<<<<"
        echo " "
    fi
    if [[ -f ${dirn} ]] ; then
        # strange but why not
        tfile=$(mktemp -u /var/www/html.XXXXXXXX)
        mv ${dirn} ${tfile}
        echo " "
        echo ">>>>> Nextdom Warning : ${dirn} is a file (!). Renaming it ${tfile} ... <<<<<"
        echo " "
    fi


}



# ================================================================================

# Keep compatibility (old plugins)
if [ -t 0 ] ; then    # launch only when interactive (this is already done by preinst Debian script)
    if [ ! "${WEBSERVER_HOME}" = "/var/www/html" ] ; then
        check_var_www_html
    fi
fi
if [ ! "${WEBSERVER_HOME}" = "/var/www/html" ] ; then
    ln -s ${WEBSERVER_HOME} /var/www/html
fi

if [ "${isdev}" = "1" ] ; then
    # A faire dans une version developpeur (apres git clone)
    cd ${WEBSERVER_HOME}
    composer -q install
    ./gen_assets.sh
fi

# Configure !
step_7_nextdom_customization
step_8_nextdom_configuration
step_9_nextdom_installation
step_10_nextdom_post
step_11_nextdom_check
distrib_1_spe

if [ "${isdev}" = "1" ] ; then
    echo " "
    echo "Installation dir  : ${WEBSERVER_HOME}"
    echo "Database host     : ${MYSQL_HOSTNAME}"
    echo "Database port     : ${MYSQL_PORT}"
    echo "Database name     : ${MYSQL_NEXTDOM_DB}"
    echo "Database user     : ${MYSQL_NEXTDOM_USER}"
    echo "Database password : ${MYSQL_NEXTDOM_PASSWD}"
    echo " "
    echo "> A self-signed SSL Certificate created in /etc/nextdom/ssl/"
    echo "> Please feel free to use another Certificate"
    echo " "
    echo " >>>>> COMPLETED <<<<< "
fi
